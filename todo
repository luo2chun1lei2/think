# 问题
1. 目前对象和属性之间的关系还没有搞清楚。
 1. 所有的对象之间都可以建立关系。
 1. 应用对象和关系也是对象。
 1. 这里的关系是维持指定对象之间特定关系的设定。
 1. 虚对象是设定关系时，为了让关系更加明确而添加的对象，在关系设定中并不存在，但是还需要。
1. 当发生了变化后，数据是如何传递的？
 1. 如果每个数据使用各自的数据类型（整数、浮点数等）和结构（比如树形、列表等），那么接收者如何处理？
 	内容可以用字符串来代替，但是数据结构怎么办？没有统一的数据类型，就无法进行高速度的解析和处理。
 	可以都假定为列表，或者用一个类型描述符号。
 1. 如果都采用通用数据结构（比如都是tree+文本），但是一定满足所有的需要吗？如果具有特定的数据结构怎么办？
 	比如处理命令参数用的map类型，用树形就无法表达。
 1. 什么时候读取这些数据？可以在传出时，发出一个备份（这样避免数据在使用中时，指向的数据被修改），但是每次都传递浪费时间，
   如果采用用到时再读取，那么无法保证在使用时是否已经被修改了。

# TODO

1. 首先建立最基本的数据类型的实现
 1. 基本关联
  1. 相等
 1. 数字（整数和浮点数）
 1. 数学公式
 1. 字符串
 1. 逻辑值
 1. 逻辑公式

设想：
尽快进入实用化，这样才能够有不断添加新功能和测试的动力，否则很容易不再维护。
第一个设想的场景就是代码分析。
第二个设想的场景是文件检索和文本处理。
 做文件的关联，然后是行和文字的关联。
第三个设想的场景是数据计算。
第四个设想的场景是git管理。
第五个是远程服务。
第六个是画面显示。
 显示在画面中，数据对象和画面对象之间建立关联。
第七个是数据结构。
 做数组、链表、Table和Tree，以及Net。

首先想能够使用
1. 可以建立数据结构。
1. 可以在控制台输入和输出。
1. 可以控制画面。