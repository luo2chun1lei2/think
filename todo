# 问题
1. 目前对象和属性之间的关系还没有搞清楚。
 1. 所有的对象之间都可以建立关系。
 1. 应用对象和关系也是对象。
 1. 这里的关系是维持指定对象之间特定关系的设定。
 1. 虚对象是设定关系时，为了让关系更加明确而添加的对象，在关系设定中并不存在，但是还需要。
1. 当发生了变化后，数据是如何传递的？
 1. 如果每个数据使用各自的数据类型（整数、浮点数等）和结构（比如树形、列表等），那么接收者如何处理？
 	内容可以用字符串来代替，但是数据结构怎么办？没有统一的数据类型，就无法进行高速度的解析和处理。
 	可以都假定为列表，或者用一个类型描述符号。
 	现在想：如果用最原始类型Data作为基本数据，然后配上数据结构（用迭代器或者特定遍历接口），可以实现目前复杂的数据传递。
 	    但是，对于复杂的对象结构，这个怎么从这个对象结构中产生Data的数据结构？
 1. 如果都采用通用数据结构（比如都是tree+文本），但是一定满足所有的需要吗？如果具有特定的数据结构怎么办？比如处理命令参数用的map类型，用树形就无法表达。
 	可以考虑低层次的数据结构只是高级数据结构的一个特例（或者子集），这样所有的对象都应该能够尽量兼容最高级的数据结构。
 	网(有回路，TODO 这个不好显示！） > 树(没有回路的网) > 表(只有一层的树) > map(单行的表）> 列表/数组/链表(数字作为Key的Map) > 单元素（相当于一个元素的列表）
 	比如列表控件最高支持列表，如果传入树，就按照第一层树的子来显示。
 1. 什么时候读取这些数据？可以在传出时，发出一个备份（这样避免数据在使用中时，指向的数据被修改），但是每次都传递浪费时间，
   如果采用用到时再读取，那么无法保证在使用时是否已经被修改了。
 1. 不过考虑到数据本身并不是按照数据结构来组织的，可能具有其天然的复杂关系，而使用这个数据的有很多，如果针对这个数据做特殊的处理，
   会造成其他使用者无法使用，所以可以通过“添加数据结构中间层”，来解决这个问题。每个使用这个数据的对象，都建立一个临时的数据结构关联这个数据。
   data <- view 变成 data <- 数据结构 <- view
 1. 之前有许多的模块可以静态的设定，比如类型等，现在为了建立和修改关系，都需要可以动态建立并进行修改。

# TODO

1. 首先建立最基本的数据类型的实现
 1. 基本关联
  1. 相等
 1. 数字（整数和浮点数）
 1. 数学公式
 1. 字符串
 1. 逻辑值
 1. 逻辑公式

设想：
尽快进入实用化，这样才能够有不断添加新功能和测试的动力，否则很容易不再维护。
第一个设想的场景就是代码分析。
第二个设想的场景是文件检索和文本处理。
 做文件的关联，然后是行和文字的关联。
第三个设想的场景是数据计算。
第四个设想的场景是git管理。
第五个是远程服务。
第六个是画面显示。
 显示在画面中，数据对象和画面对象之间建立关联。
第七个是数据结构。
 做数组、链表、Table和Tree，以及Net。

首先想能够使用
1. 可以建立数据结构。
1. 可以在控制台输入和输出。
1. 可以控制画面。

数据是如下的考虑：
1. 一个模块如果对外是透明的，则会提供一个接口来返回内部整体的数据结构的一个复制，外部可以对此数据进行修改，
 但是并不影响此模块内的数据，同样模块内如果数据被修改了，也不会影响已经传出的数据结构。
 以上结构，对于复杂系统并不合适，复杂系统中，数据结构必然庞大，怎么可能制作整体的复制，则效率会很低。
1. 另外一种模式，返回的也是内部的对象，则这样外部的对象体系也可以看到这些对象，并建立关系，
 这样适合复杂或者庞大的系统。
 
我觉的第二种是正确的，但是应该建立中间的数据结构层，因为对象处理的最好都是业务无关的数据数据结构，
这样才能够重用。
比如：
一个学校中有多个年级，每个年级都有包含的班级，
每个班级都有学生，学校对应每个年级都有对应的课程，每个课程安排老师，而每个班级都有对应的老师，以及相应的时间。

画面上，想建立
1. 列出班级和班级对应的学生的画面。
1. 根据学生查找对应的班级和对应的课程，以及对应的老师。
首先建立学校、年级、班级、老师、学生、课程和时间时间的关系，将它们联系在一起。
然后画面根据检索的条件，找到对应的对象，然后建立关系。
然后对象发生了变化后，关系根据设定，维护应该保持的关系。

变化有：
1. 应该建立对象与对象之间的关系，而不能简单的对象群和对象群之间的关系，
	因为对象群与群之间不知道应该如何建立每个对象之间的关系。如果能够隐含建立，那么群与群之间是可以的。
1. 只有具体的数据对象（RValue）才有可能具体的显示出来，而一般的对象都通过"has"关系和其它对象关联。
	比如，学生有姓名，那么就是某个学生对象和某个名字对象之间建立了“has”关系。
1. 画面上显示名字的这个列，应该和“名字”这个对象相关联。
	当名字对象的值发生了变化后，则会通知显示名字的控件，而显示名字的控件如果修改了，则修改对应的名字对象的值。
1. 如果班级和学生的关系发生变化，则监视这个关系的控件（list）就会根据情况进行修改，如果画面针对班级和学生关系进行了修改，
	则会修改对应的班级和此学生之间的关系。

好，思路已经明确，应该照着这样做了。


